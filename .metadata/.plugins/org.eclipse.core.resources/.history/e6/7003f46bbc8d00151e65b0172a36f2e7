package parser;

import java.util.ArrayList;
import java.util.Stack;

import lex.LexicalAnalyzer;
import lex.Token;

public class SyntaxParser {
	
	private LexicalAnalyzer lex;//词法分析器
	private ArrayList<Token> tokenList;//从词法分析器获得的所有token,相当于模型中的输入
	private int length;//tokenlist的长度
	private int index;//现在所指的token位置
	
	private AnalyzeTable table;//构造的语法分析表
	private Stack<Integer> stateStack;//用于存储相应的状态
	
	private Error error = null;
	
	public SyntaxParser(String filename){
		this.lex = new LexicalAnalyzer(filename);
		this.tokenList = lex.getTokenList();
		this.length = this.tokenList.size();
		this.index = 0;
		this.table = new AnalyzeTable();
		this.stateStack = new Stack<Integer>();
		this.stateStack.push(0);
	}
	
	public Token readToken(){
		if(index < length){
			return tokenList.get(index++);
		} else {
			return null;
		}
	}
	
	public void analyze(){
		while(true){
			
		}
	}
	
	/**
	 * 出错
	 */
	public void error(){
		if(error != null){
			System.out.println(error.toString());
		}
	}
	
	public static void main(String[] args){
		Stack<Integer> stack = new Stack<Integer>();
		for(int i = 0;i < 10;i++){
			stack.push(i);
		}
		System.out.println(stack.toString());
	}

}
